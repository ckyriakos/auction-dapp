{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","contractBalance","pendingReturns","highestBidder","highestBid","accounts","contract","current_bid","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","getContractBalance","call","response","response_1","setState","getContactBalance","alert","error","bid1","bid_amount","bid","send","from","value","withdraw_am","bid2","withdraw","myChangeHandler","event","target","this","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef9f4831.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {contractBalance:0,pendingReturns:0,highestBidder:null,highestBid: 0, web3: null, accounts: null, contract: null,current_bid:\"\" };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n    const current_bid = \"\";\n    const contractBalance = await instance.methods.getContractBalance().call();\n    const response = await instance.methods.highestBid().call();\n    const response_1 = await instance.methods.highestBidder().call();\n    //const pendingReturns = await instance.methods.withdraw().send({ from: accounts[0],value:5000000000000000000});\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance ,highestBid:response,highestBidder:response_1,getContactBalance:contractBalance,current_bid:\"\"});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid1 = async () => {\n    const { accounts, contract,current_bid} = this.state;\n    const bid_amount = this.state.current_bid;\n    // Stores a given value, 5 by default.\n    const withdraw_am= await contract.methods.bid().send({ from: accounts[0],value:bid_amount});\n\n          //console.log(this.state.input);\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.highestBid().call(); // responses for highestBid\n    const response_1 = await contract.methods.highestBidder.call(); // responses for highestBidder\n\n    // Update state with the result.\n    this.setState({ highestBid: response ,highestBidder:response_1,pendingReturns:withdraw_am});\n      \n  };\n  bid2 = async () => {\n    const { accounts, contract,current_bid} = this.state;\n    // Stores a given value, 5 by default.\n          //console.log(this.state.input);\n    const bid_amount = this.state.current_bid;\n    const withdraw_am = await contract.methods.bid().send({ from: accounts[0],value:bid_amount});\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.highestBid().call();\n\n    // Update state with the result.\n    const response_1 = await contract.methods.highestBidder.call();\n    // Update state with the result.\n    this.setState({ highestBid: response ,highestBidder:response_1,pendingReturns:withdraw_am});\n      \n  };\n  highestBid = async ()=>{\n    const {accounts,contract} = this.state;\n\n    const highestbid = await contract.methods.highestBid().call();\n  }\n  highestBidder = async () => {\n    const {accounts,contract} = this.state;\n    await contract.methods.highestBidder().call();\n    console.log(this.state);\n\n  }\n  withdraw = async () => {\n     const {accounts,contract} = this.state;\n     \n     const contractBalance = await contract.methods.getContractBalance().call({from: accounts[0]});\n\n\n     const withdraw_am = await contract.methods.withdraw().send({from:accounts[0]});\n     \n      \n     console.log(this.state);\n     this.setState({getContractBalance:contractBalance,pendingReturns:withdraw_am});\n  }\n\n  getContractBalance = async () =>{\n    const {accounts,contract} = this.state;\n    const contractBalance = await contract.methods.getContractBalance().call({from: accounts[0]});\n    console.log(this.state.contractBalance);\n    this.setState({getContractBalance:contractBalance});\n\n  }\n  myChangeHandler  = (event) => {\n    this.setState({current_bid : event.target.value*1000000000000000000},() =>{\n      console.log(this.state.current_bid);\n    });\n  }\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Auction Dapp</h1>\n        <div>Enter bid amount!</div>\n        <input type=\"text\"  onChange={this.myChangeHandler}/>\n        <div>Enter for bidder 1</div>\n        <div>< button onClick={this.bid1}> Bidder 1</button></div>\n        <div>Enter for bidder 2</div>\n        <div><button onClick={this.bid2}> Bidder 2</button></div>\n        <div><button onClick={this.highestBid}>Get highestBid</button></div>\n        <div>{this.state.highestBid}></div>\n        <button onClick={this.highestBidder}>Get highestBidder</button>\n        <div>{this.state.highestBidder}></div>\n        <button onClick={this.withdraw}>Withdraw</button>\n        <div>{this.state.withdraw}</div>\n        <button onClick={this.getContractBalance}>Contract BAlance</button>\n        <div>{this.state.getContractBalance}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}